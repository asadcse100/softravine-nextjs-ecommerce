// schema.prisma

model Address {
  id        Int      @id @default(autoincrement())
  setDefault Boolean
  userId    Int
  countryId Int
  stateId   Int
  cityId    Int
  user      User     @relation(fields: [userId], references: [id])
  country   Country  @relation(fields: [countryId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  city      City     @relation(fields: [cityId], references: [id])
  carts  Cart[]
}

model AffiliateConfig {
  id        Int      @id @default(autoincrement())
  // Add your fields here
}

model AffiliateEarningDetail {
  id        Int      @id @default(autoincrement())
  userId    Int
  // Define other fields here
  user      User     @relation(fields: [userId], references: [id])
}

model AffiliateLog {
  id              Int              @id @default(autoincrement())
  userId          Int
  orderDetailId   Int
  orderId         Int
  // Define other fields here
  
  user            User             @relation(fields: [userId], references: [id])
  order_detail    OrderDetail      @relation(fields: [orderDetailId], references: [id])
  order           Order            @relation(fields: [orderId], references: [id])
}

model AffiliateOption {
  id        Int      @id @default(autoincrement())
  // Define other fields here
}

model AffiliatePayment {
  id        Int      @id @default(autoincrement())
  // Add your fields here
}

model AffiliateStats {
  id        Int      @id @default(autoincrement())
  // Add your fields here
}

model AffiliateUser {
  id                   Int                  @id @default(autoincrement())
  userId               Int
  // Define other fields here
  
  user                 User                 @relation(fields: [userId], references: [id])
  affiliate_payments   AffiliatePayment[]   @relation("AffiliateUserAffiliatePayment")
}

model AffiliateWithdrawRequest {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model AppSettings {
  id           Int      @id @default(autoincrement())
  currencyId   Int
  currency     Currency @relation(fields: [currencyId], references: [id])
}

model Currency {
  id          Int      @id @default(autoincrement())
  name        String
  symbol      String
  // Add other fields as needed
}

model AppTranslation {
  id          Int      @id @default(autoincrement())
  key         String
  value       String
}

model Attribute {
  id                       Int                  @id @default(autoincrement())
  attributeTranslations    AttributeTranslation[]
  attributeValues          AttributeValue[]
  categories  Category[] @relation("CategoryAttribute")
}

model AttributeTranslation {
  id                Int       @id @default(autoincrement())
  attributeId       Int
  attribute         Attribute @relation(fields: [attributeId], references: [id])
  lang              String
  name         String
}

model AttributeValue {
  id                Int       @id @default(autoincrement())
  attributeId       Int
  attribute         Attribute @relation(fields: [attributeId], references: [id])
  // Add other fields as needed
}

model AttributeCategory {
  id        Int      @id @default(autoincrement())
  // Add other fields as needed
}

model AuctionProductBid {
  id          Int      @id @default(autoincrement())
  productId   Int
  product     Product  @relation(fields: [productId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}

model Banner {
  id          Int      @id @default(autoincrement())
  // Add other fields as needed
}

model Blog {
  id            Int           @id @default(autoincrement())
  categoryId    Int
  category      BlogCategory  @relation(fields: [categoryId], references: [id])
  // Add other fields as needed
}

model BlogCategory {
  id          Int      @id @default(autoincrement())
  // Add other fields as needed
}

model Brand {
  id                   Int               @id @default(autoincrement())
  logoId               Int
  customerProducts     CustomerProduct[]
  logo                 Upload            @relation(fields: [logoId], references: [id])
  brandTranslations    BrandTranslation[]
}

model BrandTranslation {
  id                   Int               @id @default(autoincrement())
  name                 String
  lang                 String
  brandId              Int
  brand                Brand             @relation(fields: [brandId], references: [id])
}

model BusinessSetting {
  id          Int      @id @default(autoincrement())
  // Add other fields as needed
}

model Carrier {
  id                       Int              @id @default(autoincrement())
  carrierRanges            CarrierRange[]
  carrierRangePrices       CarrierRangePrice[]
  status                   Boolean
}

model CarrierRange {
  id                    Int                 @id @default(autoincrement())
  carrierId             Int
  carrier               Carrier             @relation(fields: [carrierId], references: [id])
  carrierRangePrices    CarrierRangePrice[]
}

model CarrierRangePrice {
  id                  Int              @id @default(autoincrement())
  carrierId           Int
  carrier             Carrier          @relation(fields: [carrierId], references: [id])
  carrierRangeId      Int
  carrierRange        CarrierRange     @relation(fields: [carrierRangeId], references: [id])
  zoneId              Int
  zone                Zone             @relation(fields: [zoneId], references: [id])
}

model Cart {
  id                    Int       @id @default(autoincrement())
  address_id            Int?
  price                 Float?
  tax                   Float?
  shipping_cost         Float?
  discount              Float?
  product_referral_code String?
  coupon_code           String?
  coupon_applied        Boolean?
  quantity              Int?
  user_id               Int?
  temp_user_id          Int?
  owner_id              Int?
  product_id            Int?
  variation             String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  user                  User?     @relation(fields: [user_id], references: [id])
  product               Product?  @relation(fields: [product_id], references: [id])
  address               Address?  @relation(fields: [address_id], references: [id])
}

model CartProduct {
  id         Int      @id @default(autoincrement())
  cartId     Int
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart       Cart     @relation(fields: [cartId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
}

model Category {
  id                   Int              @id @default(autoincrement())
  cover_image_id       Int?
  icon_id              Int?
  banner_id            Int?
  parent_id            Int?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  
  category_translations CategoryTranslation[]
  coverImage           Upload?          @relation("CategoryCoverImage", fields: [cover_image_id], references: [id])
  catIcon              Upload?          @relation("CategoryIcon", fields: [icon_id], references: [id])
  bannerImage          Upload?          @relation("CategoryBanner", fields: [banner_id], references: [id])
  products             Product[]        @relation("ProductCategory")
  classified_products  CustomerProduct[]
  categories           Category[]       @relation("ChildCategories", fields: [parent_id], references: [id])
  parentCategory       Category?        @relation("ChildCategories")
  attributes           Attribute[]      @relation("CategoryAttribute")
}

model CategoryTranslation {
  id              Int      @id @default(autoincrement())
  category_id     Int
  lang            String
  name            String
  description     String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  category        Category @relation(fields: [category_id], references: [id])
  
  @@unique([category_id, lang])
}

model City {
  id               Int             @id @default(autoincrement())
  country_id       Int
  state_id         Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  
  city_translations CityTranslation[]
  country          Country         @relation(fields: [country_id], references: [id])
  state            State           @relation(fields: [state_id], references: [id])
  addresses Address[]
  customerProducts                 CustomerProduct[]
}

model CityTranslation {
  id               Int             @id @default(autoincrement())
  name             String
  lang             String
  city_id          Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  
  city             City            @relation(fields: [city_id], references: [id])
  
  @@unique([city_id, lang])
}

model ClubPointDetail {
  id              Int           @id @default(autoincrement())
  product_id      Int
  club_point_id   Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  product         Product       @relation(fields: [product_id], references: [id])
  club_point      ClubPoint     @relation(fields: [club_point_id], references: [id])
}

model Color {
  id    Int    @id @default(autoincrement())
}

model CombinedOrder {
  id          Int      @id @default(autoincrement())
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  orders      Order[]
  user        User     @relation(fields: [user_id], references: [id])
}

model CommissionHistory {
  id         Int       @id @default(autoincrement())
  order_id   Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  
  order      Order     @relation(fields: [order_id], references: [id])
}

model Conversation {
  id             Int        @id @default(autoincrement())
  sender_id      Int
  receiver_id    Int
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  
  messages       Message[]
  sender         User       @relation("SenderConversation", fields: [sender_id], references: [id])
  receiver       User       @relation("ReceiverConversation", fields: [receiver_id], references: [id])
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  zone_id   Int?
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  zone      Zone?    @relation(fields: [zone_id], references: [id])
  cities           City[]
  addresses Address[]
}

model Coupon {
  id           Int        @id @default(autoincrement())
  user_id      Int
  type         String
  code         String
  details      String
  discount     Float
  discount_type String
  start_date   DateTime
  end_date     DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [user_id], references: [id])
}

model CouponUsage {
  id    Int    @id @default(autoincrement())
}

model Customer {
  id           Int     @id @default(autoincrement())
  user_id      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User    @relation(fields: [user_id], references: [id])
}

model CustomerPackagePayment {
  id                 Int               @id @default(autoincrement())
  user_id            Int
  customerPackage_id Int
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  
  user               User              @relation(fields: [user_id], references: [id])
  customer_package   CustomerPackage   @relation(fields: [customerPackage_id], references: [id])
}

model CustomerPackage {
  id                        Int                         @id @default(autoincrement())
  customerPackagePayments   CustomerPackagePayment[]
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  
  customerPackageTranslations CustomerPackageTranslation[]
}

model CustomerPackageTranslation {
  id                  Int                 @id @default(autoincrement())
  name                String
  description         String?
  lang                String
  customer_package_id Int
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  
  customer_package    CustomerPackage     @relation(fields: [customer_package_id], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@unique([customerPackage_id, lang])
}

model CustomerProductTranslation {
  id                    Int      @id @default(autoincrement())
  customer_product_id   Int
  name                  String
  lang                  String
  description                      String?
  created_at                       DateTime                 @default(now())
  updated_at                       DateTime                 @updatedAt
  
  customer_product      CustomerProduct @relation(fields: [customer_product_id], references: [id])
}

model CustomerProduct {
  id                     Int                    @id @default(autoincrement())
  translations           CustomerProductTranslation[]

  category_id                      Int?
  subcategory_id                   Int?
  subsubcategory_id                Int?
  brand_id                         Int?
  user_id                          Int?
  state_id                         Int?
  city_id                          Int?
  thumbnail_img_id                 Int?
  status                           Boolean                  @default(true)
  published                        Boolean                  @default(true)
  created_at                       DateTime                 @default(now())
  updated_at                       DateTime                 @updatedAt

  category                         Category?                @relation(fields: [category_id], references: [id])
  subcategory                      SubCategory?             @relation(fields: [subcategory_id], references: [id])
  subsubcategory                   SubSubCategory?          @relation(fields: [subsubcategory_id], references: [id])
  brand                            Brand?                   @relation(fields: [brand_id], references: [id])
  user                             User?                    @relation(fields: [user_id], references: [id])
  state                            State?                   @relation(fields: [state_id], references: [id])
  city                             City?                    @relation(fields: [city_id], references: [id])
  customer_product_translations    CustomerProductTranslation[]
  thumbnail                        Upload?                  @relation("CustomerProductThumbnail", fields: [thumbnail_img_id], references: [id])
}

model CustomersImport {
  id       Int       @id @default(autoincrement())
  user_id  Int
}

model DeliveryBoy {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [user_id], references: [id])
  user_id  Int
}

model DeliveryBoyCollection {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [user_id], references: [id])
  user_id  Int
}

model DeliveryBoyPayment {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [user_id], references: [id])
  user_id  Int
}

model DeliveryHistory {
  id          Int       @id @default(autoincrement())
  order       Order     @relation(fields: [order_id], references: [id])
  order_id    Int
}

model FirebaseNotification {
  id       Int      @id @default(autoincrement())
}

model FlashDeal {
  id                        Int                      @id @default(autoincrement())
  status                    String
  featured                  Boolean
  flash_deal_translations  FlashDealTranslation[]
  flash_deal_products       FlashDealProduct[]
}

model FlashDealProduct {
  id            Int          @id @default(autoincrement())
  flash_deal    FlashDeal    @relation(fields: [flash_deal_id], references: [id])
  flash_deal_id Int
  product       Product      @relation(fields: [product_id], references: [id])
  product_id    Int
}

model FlashDealTranslation {
  id              Int          @id @default(autoincrement())
  title           String
  lang            String
  flash_deal      FlashDeal    @relation(fields: [flash_deal_id], references: [id])
  flash_deal_id   Int
}

model FollowSeller {
  id       Int      @id @default(autoincrement())
  shop     Shop     @relation(fields: [shop_id], references: [id])
  shop_id  Int
}

model Language {
  id        Int      @id @default(autoincrement())
  // Add other fields as needed
}

model ManualPaymentMethod {
  id        Int      @id @default(autoincrement())
  // Add other fields as needed
}

model MeasurementPoint {
  id        Int      @id @default(autoincrement())
  // Add other fields as needed
}

model Message {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversation_id], references: [id])
  conversation_id Int
  user            User         @relation(fields: [user_id], references: [id])
  user_id         Int
}

model Order {
  id                       Int                  @id @default(autoincrement())
  user                     User                 @relation(fields: [user_id], references: [id])
  user_id                  Int
  seller                   Shop                 @relation(fields: [seller_id], references: [id])
  seller_id                Int
  pickup_point             PickupPoint?         @relation(fields: [pickup_point_id], references: [id])
  pickup_point_id          Int?
  carrier                  Carrier?             @relation(fields: [carrier_id], references: [id])
  carrier_id               Int?
  assign_delivery_boy      User?                @relation("AssignedDeliveryBoy", fields: [assign_delivery_boy_id], references: [id])
  assign_delivery_boy_id   Int?
  orderDetails             OrderDetail[]
  refund_requests          RefundRequest[]
  affiliate_log            AffiliateLog[]
  club_point               ClubPoint[]
  proxy_cart_reference_id  ProxyPayment[]       @relation("OrderProxyCartReference", references: [reference_id])
  commissionHistory  CommissionHistory?   @relation(fields: [commissionHistory_id], references: [id])
  combinedOrder CombinedOrder? @relation(fields: [combinedOrder_id], references: [id])
}

model OrderDetail {
  id            Int      @id @default(autoincrement())
  order           Order           @relation(fields: [order_id], references: [id])
  order_id        Int
  product         Product         @relation(fields: [product_id], references: [id])
  product_id      Int
  pickup_point    PickupPoint?    @relation(fields: [pickup_point_id], references: [id])
  pickup_point_id Int?
  refund_request  RefundRequest?
  affiliate_log   AffiliateLog[]
}

model ClubPoint {
  id            Int      @id @default(autoincrement())
  order_id      Int
  user_id               Int  
  user                  User              @relation(fields: [user_id], references: [id])
  order                 Order             @relation(fields: [order_id], references: [id])
  club_point_details    ClubPointDetail[]
  created_at            DateTime          @default(now())
  updated_at            DateTime          @updatedAt
}

model OtpConfiguration {
  id        Int      @id @default(autoincrement())
  // Add other fields as needed
}

model Page {
  id               Int               @id @default(autoincrement())
  page_translations PageTranslation[]
}

model PageTranslation {
  id        Int     @id @default(autoincrement())
  page      Page    @relation(fields: [page_id], references: [id])
  page_id   Int
  title     String
  content   String
  lang      String
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String
  // Add your fields here
}

model PickupPoint {
  id                         Int              @id @default(autoincrement())
  pickUpStatus               Boolean          @default(true)
  staff                      Staff            @relation(fields: [staffId], references: [id])
  staffId                    Int
  pickupPointTranslations    PickupPointTranslation[]
}

model PickupPointTranslation {
  id             Int      @id @default(autoincrement())
  name           String
  address        String
  lang           String
  pickupPoint    PickupPoint @relation(fields: [pickupPointId], references: [id])
  pickupPointId  Int
}

model Plugin {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  version     String
}

model Policy {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  // Add more fields as needed
}

model Product {
  id                 Int                @id @default(autoincrement())
  name               String
  description        String?
  digital            Boolean            @default(false)
  category           Category           @relation(fields: [categoryId], references: [id])
  categoryId         Int
  brand              Brand              @relation(fields: [brandId], references: [id])
  brandId            Int
  user               User               @relation(fields: [userId], references: [id])
  userId             Int
  thumbnail          Upload             @relation(fields: [thumbnailImg], references: [id])
  thumbnailImg       Int
  productTranslations ProductTranslation[]
  taxes              ProductTax[]
  orderDetails       OrderDetail[]
  reviews            Review[]
  productQueries     ProductQuery[]
  wishlists          Wishlist[]
  stocks             ProductStock[]
  flashDealProduct   FlashDealProduct?
  bids               AuctionProductBid[]
  carts              Cart[]

  clubPointDetails ClubPointDetail[]
  categories     Category[] @relation("ProductCategory")
  cartProducts  CartProduct[]

  Physical           Product[]
  Digital            Product[]
  IsApprovedPublished Product[]
  productStocks ProductStock[]
}

model ProductTax {
  id             Int      @id @default(autoincrement())
  taxRate        Float
  product        Product  @relation(fields: [productId], references: [id])
  productId      Int
}

model ProductQuery {
  id             Int      @id @default(autoincrement())
  product       Product @relation(fields: [productId], references: [id])
  productId     Int
  user          User    @relation(fields: [userId], references: [id])
  userId        Int
  // Define fields for ProductQuery model
}

model ProductCategory {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
}

model ProductStock {
  id           Int          @id @default(autoincrement())
  product_id   Int
  variant      String
  sku          String
  price        Float
  qty          Int
  image        String?

  product      Product      @relation(fields: [product_id], references: [id])
  wholesalePrices WholesalePrice[]
}

model ProductTranslation {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id])
  productId   Int
  name        String
  unit        String
  description String
  lang        String
}

model ProxyPayment {
  id        Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  order          Order   @relation(fields: [order_id], references: [id])
  order_id       Int
  reference_id   String

  @@map("proxypay_payments")
}

model RefundRequest {
    id           Int        @id @default(autoincrement())
    orderDetail  OrderDetail @relation(fields: [orderDetailId], references: [id])
    orderDetailId Int
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    seller       User       @relation("SellerRefunds", fields: [sellerId], references: [id])
    sellerId     Int
    order        Order      @relation(fields: [orderId], references: [id])
    orderId      Int
}

model Review {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    status         Int      // Consider changing this to an enum
}

model Role {
    id                Int               @id @default(autoincrement())
    role_translations RoleTranslation[]
}

model RoleTranslation {
    id       Int      @id @default(autoincrement())
    role     Role     @relation(fields: [roleId], references: [id])
    roleId   Int
    lang     String
    // Add other fields as needed
}

class RoleTranslation extends Model{
    protected $fillable = ['name', 'lang', 'role_id'];

    public function role(){
      return $this->belongsTo(Role::class);
    }
}

model Search {
  id Int @id @default(autoincrement())
}

model Seller {
    id              Int              @id @default(autoincrement())
    user            User             @relation(fields: [userId], references: [id])
    userId          Int
    seller_package  SellerPackage?   @relation(fields: [sellerPackageId], references: [id])
    sellerPackageId Int?
    payments        Payment[]        @relation("SellerPayments")
}

model Payment {
    id        Int     @id @default(autoincrement())
    amount    Float
    seller    Seller  @relation("SellerPayments", fields: [sellerId], references: [id])
    sellerId  Int
}

model SellerPackage {
    id                  Int                       @id @default(autoincrement())
    sellerPackagePayments SelllerPackagePayment[]
    shop                Shop?                     @relation(fields: [shopId], references: [id])
    shopId              Int?
    sellerPackageTranslations SellerPackageTranslation[]
}

model SelllerPackagePayment {
    id           Int      @id @default(autoincrement())
    amount       Float
    sellerPackage SellerPackage @relation(fields: [sellerPackageId], references: [id])
    sellerPackageId Int
}

model SelllerPackagePayment {
    id              Int             @id @default(autoincrement())
    amount          Float
    user            User            @relation(fields: [userId], references: [id])
    userId          Int
    sellerPackage   SellerPackage   @relation(fields: [sellerPackageId], references: [id])
    sellerPackageId Int
}

model SellerPackageTranslation {
    id               Int             @id @default(autoincrement())
    name             String
    lang             String
    sellerPackageId  Int
    description      String?
    sellerPackage    SellerPackage @relation(fields: [sellerPackageId], references: [id])
    sellerPackageId  Int
}

model SellerWithdrawRequest {
    id     Int     @id @default(autoincrement())
    user   User    @relation(fields: [userId], references: [id])
    userId Int
    shop   Shop    @relation(fields: [shopId], references: [id])
    shopId Int
}

model Shop {
    id              Int              @id @default(autoincrement())
    user            User             @relation(fields: [userId], references: [id])
    userId          Int
    sellerPackage   SellerPackage?   @relation(fields: [sellerPackageId], references: [id])
    sellerPackageId Int?
    followers       FollowSeller[]
}

model SizeChart {
    id               Int               @id @default(autoincrement())
    sizeChartDetails SizeChartDetail[]
    category         Category          @relation(fields: [categoryId], references: [id])
    categoryId       Int
}

model SizeChartDetail {
    id          Int       @id @default(autoincrement())
    // Add your SizeChartDetail fields here
    sizeChart   SizeChart @relation(fields: [sizeChartId], references: [id])
    sizeChartId Int
}

model Slider {
    id        Int    @id @default(autoincrement())
    // Add your Slider fields here
}

model SmsTemplate {
    id        Int    @id @default(autoincrement())
    // Add your SmsTemplate fields here
}

model Staff {
    id              Int            @id @default(autoincrement())
    user            User           @relation(fields: [userId], references: [id])
    userId          Int
    role            Role           @relation(fields: [roleId], references: [id])
    roleId          Int
    pick_up_point   PickupPoint?   @relation(fields: [pickUpPointId], references: [id])
    pickUpPointId   Int?
}

model State {
    id       Int      @id @default(autoincrement())
    country  Country  @relation(fields: [countryId], references: [id])
    countryId Int
    cities   City[]
    customerProducts                 CustomerProduct[]
    addresses Address[]
}

model SubCategory {
    id              Int              @id @default(autoincrement())
    category        Category         @relation(fields: [categoryId], references: [id])
    categoryId      Int
    products        Product[]
    subSubCategories SubSubCategory[]
    customerProducts                 CustomerProduct[]
}

model Subscriber {
    id        Int    @id @default(autoincrement())
    // Add your Subscriber fields here
}

model SubSubCategory {
    id               Int              @id @default(autoincrement())
    name             String
    subCategory      SubCategory      @relation(fields: [subCategoryId], references: [id])
    subCategoryId    Int
    customerProducts                 CustomerProduct[]
}

class Tax extends Model{
    public function product_taxes() {
        return $this->hasMany(ProductTax::class);
    }
}

model TicketReply {
    id         Int      @id @default(autoincrement())
    ticket     Ticket   @relation(fields: [ticketId], references: [id])
    ticketId   Int
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    createdAt  DateTime
}

model Ticket {
    id             Int           @id @default(autoincrement())
    user           User           @relation(fields: [userId], references: [id])
    userId         Int
    ticketReplies  TicketReply[]
}

model Transaction {
    id        Int      @id @default(autoincrement())
    // Add your Transaction fields here
}

model Translation {
    id        Int      @id @default(autoincrement())
    // Add your Translation fields here
}

model Upload {
    id                 Int       @id @default(autoincrement())
    fileOriginalName   String
    fileName           String
    user               User      @relation(fields: [userId], references: [id])
    userId             Int
    extension          String
    type               String
    fileSize           Int
    deletedAt          DateTime? @db.DateTime
    customerProducts                 CustomerProduct[]        @relation("CustomerProductThumbnail")
}

model User {
  id                      Int                     @id @default(autoincrement())
  name                    String
  email                   String                  @unique
  password                String
  address                 String?
  city                    String?
  postal_code             String?
  phone                   String?
  country                 String?
  provider_id             String?
  email_verified_at       DateTime?
  verification_code       String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  wishlists               Wishlist[]
  customer                Customer?
  affiliate_user          AffiliateUser?
  affiliate_withdraw_request AffiliateWithdrawRequest[]
  products                Product[]
  shop                    Shop?
  seller                  Seller?
  staff                   Staff?
  orders                  Order[]
  wallets                 Wallet[]
  club_point              ClubPoint?
  customer_package        CustomerPackage?
  customer_package_payments CustomerPackagePayment[]
  customer_products       CustomerProduct[]
  seller_package_payments SellerPackagePayment[]
  carts                   Cart[]
  reviews                 Review[]
  addresses               Address[]
  affiliate_log           AffiliateLog[]
  product_bids            AuctionProductBid[]
  product_queries         ProductQuery[]
  uploads                 Upload[]

  customerProducts                 CustomerProduct[]
  clubPoints            ClubPoint[]
  customerPackagePayments CustomerPackagePayment[]
  senderConversations   Conversation[]  @relation("SenderConversation")
  receiverConversations Conversation[]  @relation("ReceiverConversation")
  seller_orders           Order[]                 @relation("SellerOrders", fields: [seller_id], references: [id])
  seller_sales            OrderDetail[]           @relation("SellerSales", fields: [seller_id], references: [id])
  combinedOrders CombinedOrder[]
  coupons      Coupon[]
}

model UserCoupon {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  coupon     Coupon   @relation(fields: [couponId], references: [id])
  couponId   Int

  @@index([userId, couponId], name: "user_coupon_unique_idx")
}

model Wallet {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @default(now())
  amount     Float

  @@index([userId], name: "wallet_user_index")
}

model WholesalePrice {
  id        Int      @id @default(autoincrement())
  productId Int
  price     Float
  productStockId  Int
  productStock    ProductStock @relation(fields: [productStockId], references: [id])

  @@index([productId], name: "wholesale_price_product_index")
}

model Wishlist {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int

  @@index([userId], name: "wishlist_user_index")
}

model Zone {
  id                      Int                    @id @default(autoincrement())
  name                    String
  status                  String
  carrier_range_prices    CarrierRangePrice[]
  countries Country[]

  @@index([name], name: "zone_name_index")
}
